package paratest;

import paratask.runtime.CurrentTask;

/**
 * The TestParaArray2 class is a subclass of Test.
 * 
 * It initialises a simple Array of Bytes then runs through 
 * incrementing them by one in a parallel fashion. This is 
 * done by using multi tasks for processing the elements.
 * 
 * This implementation evenly splits work amongst the threads 
 * so that for an example with two threads the first thread
 * would increment the first half of the array while the
 * second thread would increment the second half.
 * 
 * @param Size - the number of elements in the array
 * @param Stride - the number of elements between processing
 * 
 * @author Peter Nicolau
 */
public class TestParaArray2 extends Test {

	private int fThreads;
	private int fSize;
	private int fStride;
	private int[] fArray;

	public TestParaArray2(int threads, int size, int stride) {
		fThreads = threads;
		fSize = size;
		fStride = stride;
	}

	public void execute() {
		fArray = new int[fSize];
		long start = System.nanoTime();

		TaskID id = process();

		try {
			id.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		long finish = System.nanoTime();
		System.out.println(fSize + "\t" + fStride + "\t" + (finish - start));
	}

	TASK(fThreads) public void process(){
		int taskID = CurrentTask.relativeID();

		for (int i = fSize * (taskID / fThreads); i < fSize * ((taskID + 1) / fThreads); i += fStride) {
			fArray[i]++;
		}
	}

}
