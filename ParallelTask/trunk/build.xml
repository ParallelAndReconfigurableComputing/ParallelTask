<?xml version="1.0" encoding="UTF-8" ?>
<project name="ParaTask" xmlns:ivy="antlib:org.apache.ivy.ant" default="main" basedir=".">

	<property name="src.dir" location="src"/>
	<property name="test.dir" location="test"/>

	<property name="paraimage.dir" location="doc/examples/ParaImage"/>	
	<property name="paraimage.src.dir" location="${paraimage.dir}/src"/>

	<property name="dist.dir" location="release"/>
	<property name="classes.dir" location="${dist.dir}/classes"/>
	<property name="classes.main.dir" location="${classes.dir}/main"/>
	<property name="classes.test.dir" location="${classes.dir}/test"/>
	<property name="classes.paraimage.dir" location="${classes.dir}/paraimage"/>
	<property name="test.report.dir" location="${dist.dir}/report"/>

	<property name="javadoc.dir" location="doc/api" />
	<property name="lib.dir" location="libs" />

	<property name="compiler_jar" value="PTCompiler-latest.jar"/>
	<property name="runtime_jar" value="PTRuntime-latest.jar"/>
	
	<property name="javacc_home" value="libs/javacc-5.0"/>
	<property name="javacc_script_dir" value="${src.dir}/pt/compiler/parser"/>
	<property name="javacc_script" value="${javacc_script_dir}/java_1_5.jj"/>

	<!-- Dependencies that cannot be fetched from central repository -->
	<path id="build.class.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- For JUnit tests. -->
	<path id="junit.class.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${classes.main.dir}" />
		<pathelement location="${classes.test.dir}" />
	</path>

	<target name="compile.ptjava.files.in.examples" depends="compile">
	    <java classname="pt.compiler.ParaTaskParser">
			<arg value="doc/examples"/>
	        <classpath>
	        	<pathelement location="${classes.main.dir}" />
			</classpath>
		</java>
	</target>

	<target name="clean" description="Clean up the existing build.">
		<delete dir="${classes.dir}" />
		<delete dir="${test.report.dir}" />
	</target>

	<target name="init" description="Creating the folders.">
		<mkdir dir="${dist.dir}"/>
		<mkdir dir="${classes.dir}"/>
		<mkdir dir="${classes.main.dir}"/>
		<mkdir dir="${classes.test.dir}"/>
		<mkdir dir="${classes.paraimage.dir}"/>
		<mkdir dir="${test.report.dir}"/>
	</target>

	<target name="regenerate.java.parser">
		<javacc target="${javacc_script}" outputdirectory="${javacc_script_dir}" javacchome="${javacc_home}"/>
	</target>

	<target name="compile" depends="init" description="Compiles the java code">
		<javac includeantruntime="true" srcdir="${src.dir}" destdir="${classes.main.dir}">
			<classpath refid="build.class.path" />
		</javac>
		<javac includeantruntime="false" srcdir="${test.dir}" destdir="${classes.test.dir}">
			<!-- <classpath refid="build.class.path" /> -->
			<classpath refid="junit.class.path" />
		</javac>
	</target>
	
	<path id="build.paraimage.class.path">
		<pathelement location="${classes.main.dir}" />
		<fileset dir="${paraimage.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>	
	
	<target name="compile.paraimage" depends="compile" description="Compiles the java codes of paraimage">
		<javac includeantruntime="true" srcdir="${paraimage.src.dir}" destdir="${classes.paraimage.dir}">
			<classpath refid="build.class.path" />
			<classpath refid="build.paraimage.class.path" />
		</javac>

		<copy todir="${classes.paraimage.dir}/pt/examples/ParaImage/images">
		    <fileset dir="${paraimage.src.dir}/pt/examples/ParaImage/images">
		      <include name="**/*.png"/>
		      <include name="**/*.jpg"/>
		    </fileset>
		</copy>
	</target>

	<target name="dist.paraimage" depends="compile.paraimage">
		<jar jarfile="${dist.dir}/ParaImage.jar" basedir="${classes.paraimage.dir}" />
	</target>
	
	<target name="dist" depends="compile">
		<jar jarfile="${dist.dir}/${compiler_jar}" basedir="${classes.main.dir}" excludes="**/pt/queues/,**/pt/runtime/"/>
		<jar jarfile="${dist.dir}/${runtime_jar}" basedir="${classes.main.dir}" excludes="**/pt/compiler/"/>
	</target>

	<target name="test" depends="compile" description="Run the JUnit Tests.">
		<junit printsummary="yes" fork="true" haltonfailure="yes">
			<classpath refid="junit.class.path" />
			<formatter type="xml" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="gen.javadoc">
	    <delete dir="${javadoc.dir}" />
	    <javadoc
	        destdir="${javadoc.dir}"
	        use="true">
			<fileset dir="${src.dir}" defaultexcludes="yes">
			    <include name="pt/compiler/ParaTaskParser.java"/>
      			<include name="pt/runtime/CurrentTask.java"/>
      			<include name="pt/runtime/ParaTask.java"/>
      			<include name="pt/runtime/Reduction.java"/>
      			<include name="pt/runtime/TaskID.java"/>
      			<include name="pt/runtime/TaskIDGroup.java"/>
      			<include name="pt/queues/FifoLifoQueue.java"/>
      			<include name="pt/queues/WorkStealingQueue.java"/>
    		</fileset>
  		</javadoc>
	</target>

	<target name="main" depends="test, dist, clean" description="compile, test, dist and clean">
		<description>Main target</description>
	</target>
	

	<!-- =================================
	Automatically install ivy if it is not properly installed, and resolve dependencies.
 		 ================================= -->

    <target name="resolve" depends="install-ivy" description="retrieve dependencies with ivy">
        <ivy:retrieve />
    </target>

    <!-- Change this version number for getting newer version of ivy -->
	<property name="ivy.install.version" value="2.3.0" />
    <condition property="ivy.home" value="${env.IVY_HOME}">
      <isset property="env.IVY_HOME" />
    </condition>
    <property name="ivy.home" value="${user.home}/.ant" />
    <property name="ivy.jar.dir" value="${ivy.home}/lib" />
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

    <target name="download-ivy" unless="offline" description="Download ivy from the central repository.">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="install-ivy" depends="download-ivy" description="Install ivy if not properly installed.">
		<!-- try to load ivy here from ivy home, in case the user has not already dropped
		it into ant's lib dir (note that the latter copy will always take precedence).
		We will not fail as long as local lib dir exists (it may be empty) and
		ivy is in at least one of ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>
</project>