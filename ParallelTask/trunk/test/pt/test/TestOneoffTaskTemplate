package paratask.test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class TestOneoffTask {
	private static final int N_DATASIZE = 0;

	private static final String BM_METHOD = "execute";
	
	private static final Class<?>[] BM_METHOD_ARGUEMENT_TYPE = {int.class};

	private static final String MOL = "MOL";

	private static final String MOL_CLASS = "core.moldyn.Molcore";

	private static final String MON = "MON";

	private static final String MON_CLASS = "core.montecarlo.Moncore";

	private static final String RAY = "RAY";

	private static final String RAY_CLASS = "core.raytracer.Raycore";

	public static void main(String[] args) {
		if (null == args || args.length != 1) {
			try {
				throw new Exception("Wrong arguemnts setting");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		#repeat
		TaskID tid_@ = runBM_@(createBenchmark(getBenchmarkClass(args[0])));
		
		#setarg
		TaskIDGroup tig = new TaskIDGroup(@);
		
		#repeat
		tig.add(tid_@);
		
		try {
			tig.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	#repeat
	TASK private static void runBM_@(Benchmark benchmark) {System.out.println("thread : " + Thread.currentThread().getId() + " will execute this benchmark"); try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }

	private static Benchmark createBenchmark(Class<?> bmClass) {
		Object benchmark = null;
		Method method = null;
		try {
			benchmark = bmClass.newInstance();
			method = bmClass.getMethod(BM_METHOD, BM_METHOD_ARGUEMENT_TYPE);
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		}
		Object[] arguments = new Object[1];
		arguments[0] = N_DATASIZE;

		return new Benchmark(benchmark, method, arguments);
	}

	private static Class<?> getBenchmarkClass(String bmName) {

		Class<?> bmClass = null;

		try {
			if (bmName.equalsIgnoreCase(MOL)) {
				bmClass = Class.forName(MOL_CLASS);
			} else if (bmName.equalsIgnoreCase(MON)) {
				bmClass = Class.forName(MON_CLASS);
			} else if (bmName.equalsIgnoreCase(RAY)) {
				bmClass = Class.forName(RAY_CLASS);
			} else {
				throw new Exception("Can not find the Benchmark " + bmName);
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return bmClass;
	}
}