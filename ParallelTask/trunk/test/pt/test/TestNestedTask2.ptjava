package pt.test;

import java.util.Date;

public class TestNestedTask2 {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		TestNestedTask2 task = new TestNestedTask2(); 
		TaskID tid = task.task_1();
		TaskIDGroup tig = new TaskIDGroup(1);
		tig.add(tid);
		
	
		
		try {
			tig.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
	}

	TASK private void task_1() {
		System.out.println("start running task 1 " + new Date() + " on thread " + Thread.currentThread().getId());
		/*WorkerThread workerThread = (WorkerThread) Thread.currentThread();
		System.out.println(workerThread.currentTaskStack.size());*/
		try {
			Thread.sleep(1000 * 5);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		TaskID tid = task_2();
		TaskIDGroup tig = new TaskIDGroup(1);
		tig.add(tid);
		
		try {
			Thread.sleep(1000 * 5);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		try {
			tig.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		

		System.out.println("end running task 1 " + new Date() + " on thread " + Thread.currentThread().getId());

	}

	TASK private void task_2() {
		System.out.println("start running task 2 " + new Date() + " on thread " + Thread.currentThread().getId());
		/*WorkerThread workerThread = (WorkerThread) Thread.currentThread();
		System.out.println(workerThread.currentTaskStack.size());*/
		try {
			Thread.sleep(1000 * 5);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		TaskID tid = task_3();
		TaskIDGroup tig = new TaskIDGroup(1);
		tig.add(tid);
		
		try {
			Thread.sleep(1000 * 5);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		try {
			tig.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		System.out.println("end running task 2 " + new Date() + " on thread " + Thread.currentThread().getId());
	}

	TASK private void task_3() {
		System.out.println("start running task 3 " + new Date() + " on thread " + Thread.currentThread().getId());
		/*WorkerThread workerThread = (WorkerThread) Thread.currentThread();
		System.out.println(workerThread.currentTaskStack.size());*/
		try {
			Thread.sleep(1000 * 5);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		System.out.println("end running task 3 " + new Date() + " on thread " + Thread.currentThread().getId());
	}

}