package paratask.test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.concurrent.ConcurrentLinkedQueue;

public class TestMixedTask {
	private static final int N_DATASIZE = 0;

	private static final String BM_METHOD = "execute";
	
	private static final Class<?>[] BM_METHOD_ARGUEMENT_TYPE = {int.class};

	private static final String MOL = "MOL";

	private static final String MOL_CLASS = "core.moldyn.Molcore";

	private static final String MON = "MON";

	private static final String MON_CLASS = "core.montecarlo.Moncore";

	private static final String RAY = "RAY";

	private static final String RAY_CLASS = "core.raytracer.Raycore";
	
	private static ConcurrentLinkedQueue<Benchmark> concurrentLinkedQueue = null;

	//Should at least 3 arguments
	//args[0] = the total number of tasks(which includes one-off task and multi-tasks)
	//args[1] = benchmark name
	//args[2] = multi-task set length
	public static void main(String[] args) {
		if (null == args || args.length != 3) {
			try {
				throw new Exception("Wrong arguemnts setting");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		int totalNum = Integer.valueOf(args[0]);
		
		TaskID[] taskIDs = new TaskID[totalNum];
		
		
		taskIDs[0] = runBMS_0(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[1] = runBMS_1(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[2] = runBM_2(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[3] = runBMS_3(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[4] = runBMS_4(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[5] = runBMS_5(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[6] = runBM_6(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[7] = runBM_7(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[8] = runBMS_8(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[9] = runBMS_9(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[10] = runBM_10(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[11] = runBM_11(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[12] = runBM_12(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[13] = runBMS_13(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[14] = runBMS_14(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[15] = runBM_15(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[16] = runBM_16(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[17] = runBMS_17(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[18] = runBMS_18(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[19] = runBMS_19(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[20] = runBM_20(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[21] = runBMS_21(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[22] = runBMS_22(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[23] = runBMS_23(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[24] = runBM_24(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[25] = runBMS_25(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[26] = runBMS_26(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[27] = runBMS_27(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[28] = runBM_28(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[29] = runBMS_29(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[30] = runBM_30(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[31] = runBM_31(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[32] = runBMS_32(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[33] = runBM_33(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[34] = runBM_34(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[35] = runBM_35(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[36] = runBM_36(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[37] = runBM_37(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[38] = runBMS_38(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[39] = runBM_39(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[40] = runBM_40(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[41] = runBM_41(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[42] = runBM_42(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[43] = runBM_43(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[44] = runBM_44(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[45] = runBM_45(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[46] = runBM_46(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[47] = runBM_47(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[48] = runBM_48(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[49] = runBM_49(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[50] = runBMS_50(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[51] = runBMS_51(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[52] = runBM_52(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[53] = runBMS_53(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[54] = runBM_54(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[55] = runBMS_55(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[56] = runBM_56(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[57] = runBMS_57(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[58] = runBMS_58(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[59] = runBMS_59(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[60] = runBMS_60(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[61] = runBM_61(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[62] = runBM_62(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[63] = runBMS_63(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[64] = runBMS_64(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[65] = runBM_65(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[66] = runBM_66(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[67] = runBMS_67(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[68] = runBM_68(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[69] = runBMS_69(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[70] = runBMS_70(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[71] = runBMS_71(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[72] = runBM_72(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[73] = runBMS_73(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[74] = runBMS_74(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[75] = runBM_75(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[76] = runBM_76(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[77] = runBM_77(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[78] = runBMS_78(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[79] = runBM_79(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[80] = runBM_80(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[81] = runBMS_81(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[82] = runBMS_82(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[83] = runBM_83(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[84] = runBM_84(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[85] = runBMS_85(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[86] = runBMS_86(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[87] = runBMS_87(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[88] = runBMS_88(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[89] = runBM_89(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[90] = runBM_90(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[91] = runBMS_91(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[92] = runBMS_92(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[93] = runBM_93(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[94] = runBM_94(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[95] = runBM_95(createBenchmark(getBenchmarkClass(args[1])));
		taskIDs[96] = runBMS_96(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[97] = runBMS_97(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[98] = runBMS_98(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		taskIDs[99] = runBMS_99(createBenchmarkSet(getBenchmarkClass(args[1]), Integer.valueOf(args[2])));
		TaskIDGroup tig = new TaskIDGroup(totalNum);
		
		for(int i = 0; i < totalNum; i++){
			tig.add(taskIDs[i]);
		}
		
		try {
			tig.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	TASK(*) private static void runBMS_0(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_1(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_3(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_4(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_5(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_8(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_9(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_13(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_14(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_17(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_18(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_19(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_21(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_22(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_23(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_25(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_26(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_27(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_29(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_32(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_38(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_50(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_51(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_53(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_55(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_57(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_58(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_59(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_60(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_63(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_64(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_67(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_69(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_70(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_71(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_73(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_74(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_78(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_81(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_82(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_85(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_86(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_87(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_88(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_91(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_92(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_96(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_97(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_98(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }
	TASK(*) private static void runBMS_99(ConcurrentLinkedQueue<Benchmark> benchmarkQueue) { Benchmark benchmark = null; while (null != (benchmark = benchmarkQueue.poll())) { runBM(benchmark); } }

	TASK private static void runBM_2(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_6(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_7(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_10(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_11(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_12(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_15(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_16(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_20(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_24(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_28(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_30(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_31(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_33(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_34(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_35(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_36(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_37(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_39(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_40(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_41(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_42(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_43(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_44(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_45(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_46(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_47(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_48(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_49(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_52(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_54(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_56(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_61(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_62(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_65(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_66(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_68(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_72(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_75(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_76(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_77(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_79(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_80(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_83(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_84(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_89(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_90(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_93(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_94(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_95(Benchmark benchmark) { try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }


	private static void runBM(Benchmark benchmark) {
		System.out.println("thread : " + Thread.currentThread().getId() + " will execute this benchmark");
		try {
			benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments());
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		}
	}

	private static ConcurrentLinkedQueue<Benchmark> createBenchmarkSet(Class<?> bmClass, Integer setLen) {
		concurrentLinkedQueue = new ConcurrentLinkedQueue<Benchmark>();
		for (int i = 0; i < setLen; i++) {
			Object benchmark = null;
			Method method = null;
			try {
				benchmark = bmClass.newInstance();
				method = bmClass.getMethod(BM_METHOD, BM_METHOD_ARGUEMENT_TYPE);
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			} catch (NoSuchMethodException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			}
			Object[] arguments = new Object[1];
			arguments[0] = N_DATASIZE;

			concurrentLinkedQueue.add(new Benchmark(benchmark, method, arguments));

		}
		return concurrentLinkedQueue;
	}
	
	private static Benchmark createBenchmark(Class<?> bmClass) {
		Object benchmark = null;
		Method method = null;
		try {
			benchmark = bmClass.newInstance();
			method = bmClass.getMethod(BM_METHOD, BM_METHOD_ARGUEMENT_TYPE);
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		}
		Object[] arguments = new Object[1];
		arguments[0] = N_DATASIZE;

		return new Benchmark(benchmark, method, arguments);
	}

	private static Class<?> getBenchmarkClass(String bmName) {

		Class<?> bmClass = null;

		try {
			if (bmName.equalsIgnoreCase(MOL)) {
				bmClass = Class.forName(MOL_CLASS);
			} else if (bmName.equalsIgnoreCase(MON)) {
				bmClass = Class.forName(MON_CLASS);
			} else if (bmName.equalsIgnoreCase(RAY)) {
				bmClass = Class.forName(RAY_CLASS);
			} else {
				throw new Exception("Can not find the Benchmark " + bmName);
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return bmClass;
	}
}
