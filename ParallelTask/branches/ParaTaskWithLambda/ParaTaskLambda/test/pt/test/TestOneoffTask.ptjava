package pt.test;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class TestOneoffTask {
	private static final int N_DATASIZE = 0;

	private static final String BM_METHOD = "execute";
	
	private static final Class<?>[] BM_METHOD_ARGUEMENT_TYPE = {int.class};

	private static final String MOL = "MOL";

	private static final String MOL_CLASS = "core.moldyn.Molcore";

	private static final String MON = "MON";

	private static final String MON_CLASS = "core.montecarlo.Moncore";

	private static final String RAY = "RAY";

	private static final String RAY_CLASS = "core.raytracer.Raycore";

	public static void main(String[] args) {
		if (null == args || args.length != 1) {
			try {
				throw new Exception("Wrong arguemnts setting");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		TaskID tid_0 = runBM_0(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_1 = runBM_1(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_2 = runBM_2(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_3 = runBM_3(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_4 = runBM_4(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_5 = runBM_5(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_6 = runBM_6(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_7 = runBM_7(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_8 = runBM_8(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_9 = runBM_9(createBenchmark(getBenchmarkClass(args[0])));
		
		try {
			Thread.sleep(1000 * 30);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		
		TaskID tid_10 = runBM_10(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_11 = runBM_11(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_12 = runBM_12(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_13 = runBM_13(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_14 = runBM_14(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_15 = runBM_15(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_16 = runBM_16(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_17 = runBM_17(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_18 = runBM_18(createBenchmark(getBenchmarkClass(args[0])));
		TaskID tid_19 = runBM_19(createBenchmark(getBenchmarkClass(args[0])));
		
		
		
		TaskIDGroup tig = new TaskIDGroup(20);
		
		tig.add(tid_0);
		tig.add(tid_1);
		tig.add(tid_2);
		tig.add(tid_3);
		tig.add(tid_4);
		tig.add(tid_5);
		tig.add(tid_6);
		tig.add(tid_7);
		tig.add(tid_8);
		tig.add(tid_9);
		tig.add(tid_10);
		tig.add(tid_11);
		tig.add(tid_12);
		tig.add(tid_13);
		tig.add(tid_14);
		tig.add(tid_15);
		tig.add(tid_16);
		tig.add(tid_17);
		tig.add(tid_18);
		tig.add(tid_19);
		
		try {
			tig.waitTillFinished();
		} catch (ExecutionException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	TASK private static void runBM_0(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_1(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_2(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_3(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_4(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
	TASK private static void runBM_5(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
	try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
		TASK private static void runBM_6(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
	try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
		TASK private static void runBM_7(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
	try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
		TASK private static void runBM_8(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
	try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
		TASK private static void runBM_9(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
	try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
		TASK private static void runBM_10(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
		try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
			TASK private static void runBM_11(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
		try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
			TASK private static void runBM_12(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
		try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
			TASK private static void runBM_13(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
		try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
			TASK private static void runBM_14(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
		try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
			TASK private static void runBM_15(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
			try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
				TASK private static void runBM_16(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
			try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
				TASK private static void runBM_17(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
			try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
				TASK private static void runBM_18(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
			try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }
				TASK private static void runBM_19(Benchmark benchmark) { 			System.out.println("Oneoff-Task [subtask "+CurrentTask.relativeID()+"]  [thread "+CurrentTask.currentThreadID()+"]  [globalID "+CurrentTask.globalID()+"]  [mulTaskSize "+CurrentTask.multiTaskSize()+"]  [TaskID "+CurrentTask.currentTaskID()+"]  [ISinside? "+CurrentTask.insideTask()+"]  [progress "+CurrentTask.getProgress()+"]");
			try { benchmark.getMethod().invoke(benchmark.getInstance(), benchmark.getArguments()); } catch (IllegalAccessException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (InvocationTargetException e) { e.printStackTrace(); } }

	private static Benchmark createBenchmark(Class<?> bmClass) {
		Object benchmark = null;
		Method method = null;
		try {
			benchmark = bmClass.newInstance();
			method = bmClass.getMethod(BM_METHOD, BM_METHOD_ARGUEMENT_TYPE);
		} catch (InstantiationException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		}
		Object[] arguments = new Object[1];
		arguments[0] = N_DATASIZE;

		return new Benchmark(benchmark, method, arguments);
	}

	private static Class<?> getBenchmarkClass(String bmName) {

		Class<?> bmClass = null;

		try {
			if (bmName.equalsIgnoreCase(MOL)) {
				bmClass = Class.forName(MOL_CLASS);
			} else if (bmName.equalsIgnoreCase(MON)) {
				bmClass = Class.forName(MON_CLASS);
			} else if (bmName.equalsIgnoreCase(RAY)) {
				bmClass = Class.forName(RAY_CLASS);
			} else {
				throw new Exception("Can not find the Benchmark " + bmName);
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return bmClass;
	}
}
